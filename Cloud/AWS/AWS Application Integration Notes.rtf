{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Application Integration\
SQS (Simple Queue Service)\
	- Distributed Queue System\
	- Pull based (not push based)\
	- Enables web service applications to quickly and reliably queue messages\
		- that one component in the application generates to be consumed by another component\
	- Queue is a temporary repository for messages that are awaiting processing\
	- In other words any component of a distributed application can store messages in the fail-safe queue\
	- you can decouple the components of an application so they run independently, easing message management\
	- any component can retrieve the messages programmatically using SQS API\
	- problems that it addresses\
		- queue resolves issues that arise if the producer is producing work faster than the consumer can process it\
		- if the producer or consumer are only intermittently connected to the network\
	- you can also trigger the auto scaling event for EC2 instances based on queue size\
	- two types of queues\
		- Standard\
			- Lets you have nearly unlimited number of transactions per second\
			- Guarantees that a message is delivered at least once\
			- In rare scenario the message may be delivered more than one copy of a message is delivered out of order\
			- It provides best-effort ordering (generally delivered in the same order as they are sent)\
		- FIFO\
			- exactly-once processing\
			- the order in which messages are sent and received is strictly preserved\
			- the message is delivered once and remains available until a consumer processes and deletes it\
			- duplicates are not introduced into the queue\
			- allow multiple ordered message groups within a single queue\
			- 300 transactions per second, but have all the capabilities of standard queues\
	- messages can contain up to 256 KB of text in any format\
	- if it is over 256 kb you can then store it s3 (upto 2GB) and SQS can access that\
	- Messages can be kept in the queue from 1 minute to 14 days; default retention period is 4 days\
	- Polling\
		- Long polling - does not return a response until message arrives in the queue or long poll times out\
		- Short polling - returns immediately (even if the message queue being polled is empty)\
	- Visibility Time out\
		- the amount of time that the message is invisible in the SQS queue after a reader picks up\
		- provided the job is processed before the time out expires, ec2 instance will delete the message\
		- if the job is not processed within that time or the processed dies\
			- the message will become visible again for another reader\
		- this could result in the same message being delivered twice\
		- maximum timeout can be 12 hours\
SNS (Simple Notification Service)\
	- web service to setup operate and send notifications from the cloud\
	- Instantaneous Push based delivery (no polling)\
	- Simple APIs and easy integration with applications\
	- Flexible message delivery over multiple transport protocols\
	- Inexpensive, pay-as-you-go model with no up-front costs\
	- Easy to configure (point and click interface in AWS console)\
	- provides a highly scalable, flexible, and cost-effective capability to publish messages from an app\
	- immediately delivers them to subscribers or other applications\
	- supports push notifications directly to Apple, Google, Fire OS and Windows Devices as well as Android devices\
		- (in china with Baidu Cloud Push)\
	- Can also deliver notifications by SMS or email to SQS queues or to any HTTP Endpoint\
	- allows you to group multiple recipients using topics\
	- A topic is an \'93access point\'94 for allowing recipients to dynamically subscribe for identical copies of notification\
	- One topic can support for multiple endpoint types \
		- you can group iOS, Android and SMS recipients\
	- When you publish to a topic, SNS delivers appropriately formatted copies of your messages to each subscriber\
	- To prevent loss of messages\
		- all messages published to SNS are stored reduntantly across multiple AZ\
Step Functions\
	- Build serverless visual workflow to orchestrate your lambda functions\
	- Represent flow as a JSON state machine\
	- Features: Sequence, Parallel, conditions, timeouts, error handling\'85\
	- can also integrate with EC2, ECS, On premise servers, API Gateway\
	- maximum execution time of 1 year\
	- Possibility to implement human approval feature\
	- Use cases:\
		- Order Fulfillment\
		- Data processing\
		- Web applications\
		- Any workflow\
	- Step Functions is recommended to be used for new applications, except\
		- If you need external signals to intervene in the processes\
		- If you need child processes that return values to parent processes\
\
SWF - Simple Workflow Service\
	- Coordinate work amongst applications\
	- Code runs on EC2 (not really serverless)\
	- 1 year max run time\
	- Concept of \'93activity step\'94 and \'93decision step\'94\
	- Has built-in \'93human intervention\'94 step\
	- Use cases\
		- Order fulfilment\
		- Web applications\
		- warehouse etc\
	- It is not recommended anymore for newer applications - step functions is the way to go forward\
\
\
SAM - Serverless Application Model\
	- Framework for developing and deploying serverless applications\
	- All the configurations is in YAML code\
	- Generate complex CloudFormation from SAM YAML file\
	- Supports anything from CloudFormation: Outputs, Mappings Parameters, Resources\'85\
	- Only two commands to deploy to AWS\
	- SAM can use CodeDeploy to deploy Lambda functions\
	- SAM can help you to run Lambda, API Gateway, DynamoDB locally\
\
	- SAM Recipe\
		- Transform Header indicates it\'92s a SAM template\
			- Transform: \'91Aws::Serverless-2016-10-31\'92\
		- Write Code\
			- AWS::Serverless::Function\
			- AWS::Serverless::API\
			- AWS::Serverless::SimpleTable\
\
	- Package & Deploy\
		- aws cloudformation package / sam package\
		- aws cloudformation deploy / sam deploy\
\
	- Deep dive into SAM Deployment\
		- To start with you will have \
			- SAM template YAML file\
			- your application code + swagger file (swagger file is optional)\
		-  When you run aws cloudformation package\
			- it will take your YAML file and zip & upload your code to S3 bucket\
			- it will also transform SAM YAML file and generate cloud formation template YAML\
			- the generated template will have references to the uploaded code in S3\
		- When you run aws cloudformation deploy\
			- it will take generated cloud formation template and create & execute a change set\
			- change set is used to figure out how cloud formation will take the existing state to the desired state\
			- cloud formation will then apply it your stack\
			- stack will then comprise of all the things that we desired for\
	\
	\
Amazon MQ\
}