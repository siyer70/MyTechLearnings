Networking and Content Delivery
=========================

DNS (Route53)
	- Domain Name Service converts human friendly names to IP (Internet Protocol) address
	- ipv4 (32 bit) supports 4 billion addresses
	- ipv6 (128 bit) supports 340 undecillion addresses
	- top level domain (.com)
		- top level domain names are controlled by IANA (Internet Assigned Numbers Authority)
		- http://www.iana.org/domains/root/db
	- second level domain (.co.uk)
	- domains are registered with InterNIC (a service of ICANN) - 
		- enforces uniqueness of domain names across internet
	- each domain name becomes registered in a central database known as WhoIS database
	- popular domain registrar include - Amazon, GoDaddy.com, 123-reg.co.uk etc
	- DNS Zones
		- TLD Zones - There is DNS Zone for each Top Level Domain and TLD are managed by ICANN/IANA
		- Second level domains are defined as separate zones managed by individuals or organisations
		- Organisations can run their own DNS servers or delegate management to an external provider
	- DNS Zone file, Zone Records 
		- two DNS Zone types - master file and cache file
		- In Zone file each line represents zone record (called Resource Records or RR) - consisting of following fields
			- name, ttl, record class, record type, record data
			- record class for ex: IN internet namespace
			- record type for ex: SOA (mandatory record), 
				- NS - Name Server
					- They are used by TLD servers 
					- To direct traffic to the content DNS Server which contains the authoritative DNS records
				- SOA (Start of Authority) Record
					- specifies the primary authoritative name server for the DNS Zone
					- administrator of the zone
					- current version of the data file
					- TTL
				- A - hostname to IP address mapping for IPV4
				- AAAA - hostname to IP address mapping for IPV6 
				- CNAME - (canonical name record) - host alias
				- MX Record - (mail exchange) - specifies SMTP email server for the domain
				- PTR Record - reverse of A record (i.e. IP address to name mapping)
				- Alias - works like CNAME (CNAME can’t be used for naked domain names zone apex record)

	- Lab - Domain Registration Process
	- Routing Policies 
		Simple Routing (Random Routing)
			- create A record set with naked domain name (for ex: xyz.com is naked domain, but www.xyz.com is not)
			- one record with multiple IP address values - Route 53 will randomly pick the IP
			- browser will cache the DNS, so even if you refresh nothing will change until TTL expires
		Weighted Routing
			- create multiple A record sets with naked domain name - each with their weightage
			- you can associate health check - if the ip not available, then Route 53 will route it to other available ones
			- you need to create health check with failure thresholds within specified duration
			- you can specify SNS notifications for health check failures
			- when a health check fails, it is removed from Route 53 until it passes the health check again
		Latency based Routing
			- create a latency resource record set for EC2 in each region that hosts your website
			- when Route 53 receives a query for your site, it selects the record set for the region with the lowest latency
		Failover Routing
			- used when you want to create active (primary) / passive (secondary) setup
			- Route 53 will monitor the health of your primary site using a health check
			- health check monitors the health of your end points
		GeoLocation Routing
			- It lets you choose where your traffic will be sent based on the geographic location of the user
			- the above is based on where the DNS query originates
			- for ex all European client request will be routed to a fleet of EC2 instances in Europe
				- these EC2 instances are setup with Euro as local currency
				- Depending on EC2 instance it can have the language set as well 
		GeoProximty Routing (Traffic Flow Only)
			- Routes traffic based on the geographic location of the users and your resources.
			- Optionally you can choose to route more traffic or less to a given resource by specifying “bias”
			- A bias expands or shrinks the size of the geographic region from which traffic is routed to a resource
			- To use GeoProximity Routing, you must use Route 53 traffic flow
			- You can define a very complicated traffic flow policies with traffic flow visual editor
		Multivalue Answer Routing
			- Similar to simple routing, but allows you to put health checks on each record set
			- It returns only values for healthy resources
			- It allows you to create multiple record sets with each having its own health check

Reference - 
https://www.slideshare.net/PeterREgli/dns-6027310
https://ns1.com/resources/dns-zones-explained

Eg
- when you type xyz.com in the browser
- browser checks the cache for the resource records (RR) and if it not found, roots it to the root server
Root server - which knows the ips of TLD name servers (.com, .edu etc)
TLD name server in turn delegates the call to the next level dns server 
the process goes on until it finds a dns server that has the authoritative dns records
Authoritative dns records consists of SOA and other RR records such as A, CNAME etc

For testing different routing policies - use your organization VPN in different region
For clearing chrome cache for DNS queries - chrome://net-internals/#dns
	- Clear Host cache in DNS Menu
	- Flush Socket Pools in Sockets Menu

Route53 Resolver (VPCs, Inbound endpoints, Outbound endpoints, Rules)

Traffic Flow (Traffic policies and Policy records)


VPC (Virtual Private Cloud a.k.a Virtual Network)
	- Think VPC as Logical Datacenter in AWS
	- Prerequisites
		- read IP Addresses
			- https://www.computerhope.com/jargon/i/ip.htm
		- Network class and their ranges
			- https://www.tutorialspoint.com/ipv4/ipv4_address_classes.htm
		- Subnet mask
			- https://www.iplocation.net/subnet-mask
			- https://www.iplocation.net/subnet-calculator
		- CIDR
			- cidr.xyz
			- https://whatismyipaddress.com/cidr
		- Private IP Addresses and their ranges
			- 10.0.0.0 to 10.255.255.255 (10/8 prefix)
			- 169.254.0.0 to 169.254.255.255 (Automatic Private IP Addressing)
			- 172.16.0.0 to 172.31.255.255 (172.16/12 prefix)
			- 192.168.0.0 to 192.168.255.255 (192.168/16 prefix)
	- amazon always reserves 5 ip address (for ex if your vpc address is 10.0.0.0/1t6 and subnet is 10.0.1.0/24 then)
		- 10.0.0.0 - reserved network address
		- 10.0.0.1 - reserved for vpc router
		- 10.0.0.2 - reserver for dns server
		- 10.0.0.3 - reserved by was (for future use)
		- 10.0.0.255 - reserved by amazon because broadcast is not supported in VPC
	- smallest subnet that you can have in AWS is /28 (16 hosts)
	- one subnet can belong to one availability zone (you cannot stretch subnet to multiple availability zone)
	- however one availability zone can have multiple subnets
	- Summary of what we can do with VPC
		- Launch instances into a subnet
		- Assign custom IP address ranges within Subnet
		- Configure route tables between subnets
		- Create internet gateway and attach it to your VPC
		- Much better security control over our AWS resources
		- Instance specific security groups
		- Define Subnet Network Access control lists
	- security groups are stateful and network acts are stateless
	- Default VPC vs Custom VPC
		- Default VPCs are user friendly (minimum configuration need and no network knowledge required)
		- Default VPCs are internet accessible
		- EC2 instances have both Public and Private Addresses
	- VPC Peering
		- you can connect one VPC with another via direct network route using private ip addresses
		- instances behave as if they are on the same private network
		- you can peer VPCs with other AWS account as well as other VPCs in the same account
		- you can peer between regions
		- Peering happens always in star configuration (NO TRANSITIVE PEERING)
			- this means that 
				- if you have 3 VPCs (VPCA, VPCB, VPCC), 
				- if VPCB is peered with VPCA and VPCA peered with VPCC
				- then VPCB cannot talk to VPCC, you need to explicitly create a peering between VPCB and VPCC
	- you can also create a VPN connection between your corporate data centre and VPC
	- you can have only 1 internet gateway per VPC - AWS makes sure that they are highly available (important)
	- security groups do not span across vpc
	- the above is to used to leverage AWS cloud as an extension of your corporate data centre
	Eg:
	create a region (us-east-1)
	create a VPC in that region (10.0.0.0/16)
	create a public subnet (10.0.1.0/24)
	create a private subnet (10.0.2.0/24)
	create EC2 instance in each subnet (host-public, host-private)
	create security groups for each
	create network acl (rules to access) for each
	create router and a route table for each
	create a VPC Gateway to access private subnet
	create an Internet Gateway to access public subnet
	Internet traffic will directed via Internet Gateway as below
	Internet Gateway -> Router -> Route Table1 -> Network ACL1 -> Security Group -> host-public
	You can then SSH to host-public and then ssh to host-private from there (Bastion host or Jump Server example)

VPC Peering
	- VPC peering is simply a connection between two VPCs
	- enables you to route traffic between them using private IP addresses
	- Instances in either VPC can communicate with each other as if they are within the same network
	- You can create VPC peering connections between your own VPCs
	- or within VPCs in another AWS account within a “Single Region”
	- It is neither a gateway nor a vpn connection and does not rely on a separate piece of physical hardware
	- There is no single point of failure for communication or a bandwidth bottleneck
	- for eg: 
		- VPC A with CIDR block 10.0.0.0/16
		- VPC B with CIDR block 192.168.0.0/24
		- VPC C with CIDR block 172.160.0.0/16
		- VPC A can peer with VPC B or with VPC
		- however VPCs with overlapping addresses can’t connect to each other
			- for eg: VPC A with CIDR block 10.0.0.0/16 can’t connect with VPC B with CIDR block 10.0.0.0/24
		- Transitive peering not supported 
			for eg: 
				- lets say VPC A is peered with VPC B and VPC B with VPC C 
				- VPC A can’t communicate with VPC C
				- you always need to have one to one peering connection

(Inter Region VPC Peering is now possible)

	- Unsupported VPC Peering Configurations
		- Overlapping CIDR Blocks
		- Transitive Peering
		- Edge to Edge Routing Through a Gateway or Private Connection (important and interesting - see the link below to read this)

			- If either VPC in a peering relationship has one of the following connections, 
				- you cannot extend the peering relationship to that connection:

					- A VPN connection or an AWS Direct Connect connection to a corporate network
					- An internet connection through an internet gateway
					- An internet connection in a private subnet through a NAT device
					- A gateway VPC endpoint to an AWS service; for example, an endpoint to Amazon S3.
					- (IPv6) A ClassicLink connection. 
						(You can enable IPv4 communication between a linked EC2-Classic instance and instances in a VPC
						 on the other side of a VPC peering connection. However, IPv6 is not supported in EC2-Classic, 
						 so you cannot extend this connection for IPv6 communication)

			- read this: https://docs.aws.amazon.com/vpc/latest/peering/invalid-peering-configurations.html (explained with diagram)

		
	

NAT Instance / NAT Gateways
	- NAT Instance and NAT Gateways enables private subnet resources talk to internet
	- Both of them must be in public subnet
	- Private Subnet should have a route out to NAT resource (need to define in Route tables using edit routes option)
	- Automatically assigned a public IP address

	- NAT Instance is a single EC2 instance 
	- You need to disable source/destination check in NAT Instance
	- Amount of traffic NAT instance can support depends on the instance size (it could become a bottle neck)
	- You can create high availability using Autoscaling Groups, multiple subnets in different AZs and a script to
	  automate fail over 
	- should be behind a security group (for eg: WEBDMZ in our case)

 
	- NAT Gateways are highly available EC2 instances deployed in multiple availability zones
	- NAT Gateways are the preferred option when hundreds of systems needs to talk to internet
	- Redundant inside availability zone
	- Starts at 5 Gbps and can go up to 45 Gbps
	- No need to patch
	- Not associated with Security Groups
	- No need to disable source/destination checks
	- create a NAT Gateway in each Availability Zone and configure your routing for your resources accordingly

Network ACL
	- A default Network ACL gets created when VPC gets created
	- By default it allows all inbound and outbound traffic
	- You can create custom NACL and by default all inbound and outbound traffic are denied until you add rules
	- Block specific IP addresses using NACL and not using security groups
	- Network ACL are the first line of defence
	- if you deny a specific protocol/port in NACL, then it will not reach your security groups (2nd line of defence)
	- Network ACLs are stateless, responses to allow inbound traffic are subjected to the rules for outbound traffic
	- and vice versa (note that security groups are stateful)
	- A subnet can be associated with only one network acl
	- A network all can have 0 or more subnets associated
	- When a new subnet is created, by default gets associated with default Network ACL
	- You can explicitly associate a subnet with a new custom network all
	- Subnets not explicitly associated with any network acl, will remain associated with default network acl
	- Define allow and deny rules for specific protocols, IP address range 
	- Rules are evaluated in chronological order starting with the lowest number
	- If you define allow rules before deny rules (for the same prootcol & ip port ranges), the allow rules takes precedence

Bastions (Jump Boxes)
	- specifically designed and configured to withstand attacks
	- enables you to securely connect to ec2 instances in the private subnet using ssh or rdp
	- generally runs one service (for eg: proxy server) - all other services are stopped in the host
	- use case - you can ssh / rdp to hosts in your private subnet
	- flow: Internet Gateway -> Router -> Route Table -> Network ACL -> Security Groups -> Bastion host -> host to ssh
	- you cannot use NAT Gateway as a Bastion host

Direct Connect (Express Route in Azure)
	- AWS Direct Connect is a cloud service solution
	- It directly connects your data centre to AWS
	- It makes it easy to establish a dedicated network connection from your premises to AWS
	- Useful for high throughput workloads (high volumes of network traffic)
	- Or if you need a stable and reliable secure connection
	- Thus reduces network costs, increases bandwidth throughput
	- Provide more consistent network experience than Internet-based Connections
	- Example Scenario with key entities as below
		a) Public services in AWS region
		b) Direct Connect Locations (spread all over the word)
			1. Cage for AWS routers
			2. Cage for Partner routers
		c) Customer Data Center (WAN / MAN Router)

		- Connection between a and b1 is via AWS backbone network using AWS routers in Direct Connect Location
		- Connection between b2 and c is via NPLS circuit or dedicated links using Partner routers in Direct Connect Loc
		- X connect between AWS routers (b1) and Partner routers (b2) in Direct Connect Location (via network cable)

VPC Flow Logs
	- enables you to capture information about the IP traffic going to and from network interfaces in your VPC
	- logs can be stored in Cloudwatch Logs or in S3 bucket - you can retrieve it from there
	- Can be created at 3 levels
		- VPC
		- Subnet
		- Network Interface (ENI)
	- used for monitoring VPC traffic
	- you cannot enable flow logs for VPC that are peered with your VPC unless that VPC is in your account
	- you cannot tag a flow log
	- after you have created a flow log you cannot change its configuration (for ex: specifying different IAM role etc)
	- Not all traffic is monitored
		- Traffic generated by instances when they contact Amazon DNS server
		- If you have your own DNS Server, then all traffic to that DNS Server is logged
		- Traffic generated by Windows Instance for Amazon Windows license activation
		- Traffic to and from 169.254.169.254 for instance metadata
		- DHCP Traffic
		- Traffic to the reserved IP Address for the default VPC router

VPC Endpoints
	- A VPC Endpoint enables you to privately connect your VPC to AWS supported Services
	- VPC Endpoint Services is powered by PrivateLink 
	- It does not require Internet Gateway, NAT device, VPN Connection, AWS Direct Connect Connection
	- Instances in your VPC do not require public IP addresses to communicate with resources in the service
	- Traffic between your VPC and the other service does not leave the Amazon network
	- Endpoints are virtual devices
	- They are horizontally scaled, redundant and highly available
	- Thus they do not impose availability risks or bandwidth constraints on your network traffic
	- There are two types of endpoints
		- Interface Endpoints
			- An elastic network interface with a private IP address
			- It serves as an entry point for traffic destined to a supported service
		- Gateway Endpoints
			- Currently Gateway Endpoint supports S3 and DynamoDB

API Gateway
	- Fully managed service that makes it easy for developers to publish, maintain, monitor and secure APIs at any scale
	- can create an API that acts as a “front door” for apps to access data, business logic from your back-end services
		- such as
			- AWS Lambda
			- Apps running on EC2
			- Any Web Application
			- Access and write to Dynamo DB
	- what can API Gateway do
		- Expose HTTPS endpoints to define a RESTful API
		- Serverlessly connect services like Lambda & DynamoDB
		- Send each API endpoint to a different target
		- Run efficient with low cost (?)
		- Scales automatically (no ASG needs to be defined)
		- Track and Control usage by API Key
		- Throttle requests to prevent attacks
		- Connect to CloudWatch to log all requests for monitoring
		- Maintain multiple versions of your API
	- How to configure
		- Define a API (Container)
		- Define Resources and Nested Resources using URL paths
		- For each Resource
			- Select supported HTTP methods (verbs)
			- Set security
			- Choose target (such as EC2, Lambda, DynamoDB etc)
			- Set Request and Response transformations
	- How to Deploy API Gateway
		- Uses API Gateway domain, by default
		- Can use custom domain
		- Supports AWS Certificate Manager: free SSL/TLS certs
	- Enable API Caching in API Gateway to cache your endpoints (for a defined TTL)
		- reduces the number of calls to your endpoints
		- improves the latency	 
	- Enable CORS
		- First understand the concept of Same Origin Policy and Cross-Site Scripting (XSS) attacks
		- Cross Origin Resource Sharing is a mechanism that
			- allows restricted resources (e.g. fonts) on a web page to be requested from another domain
			- i.e. outside the domain from which the first resource was served
		- Browser makes an HTTP OPTIONS call for a URL (OPTIONS is an HTTP Method like GET, PUT and POST)
		- Server returns a response that says: “These other domains are approved to GET this URL”
		- Enable CORS - if servers returns “Origin policy cannot be read at the remote resource”
		- CORS is enforced by the client

CloudFront (Content Delivery Network)
	- A system of distributed servers (network) that deliver webpages and web content to a user based on the
		- Geographic locations of user
		- the origin of webpage
		- and a content delivery server
	- It can be used deliver your entire website, including dynamic, static, streaming and interactive content
		- using a global network of edge locations - hence content is delivered with the best possible performance
	- Concepts
		- Edge Location
			- This is the location where content will be cached - This is separate to an AWS Region / AZ
		- Origin
			- This is the origin of all the files that the CDN will distribute. 
				- This can be S3, EC2 instance, ELB, Route53 etc 
  		- Distribution
			- This is the name given to CDN which consists of a collection of Edge Locations
	- Eg Scenario 
		- Website hosted in London
		- User1 queries from Toronto for a page in this website
		- Nearest Edge Location is in New York
		- if it is the first time the request is received, the edge location will download the page from Origin and cache it
		- if the page is available in cache, it will be served from there to the user
		- If User2 queries from the same location, 
			- it will be retrieved much faster because it is already cached in the Edge Location
	
	- Two different types of distribution
		- Web distribution - Typically used for websites
		- RTMP (Real Time Media Processing) - used for Adobe and Media Streaming

	- Edge Locations are not just “Read Only” - you can write to them too (put an object on to them)
	- Objects are cached for the life of the TTL (Time To Live)
	- You can clear cached objects - but you will be charged
	
	- How it works
		- Specify the Origin Domain, Origin path, Origin id
		- Restrict Bucket Access Yes/No (access to S3 only through CloudFront URLs using signed urls/cookies)
		- Viewer Protocol (HTTP, HTTPS etc)
		- Allowed HTTP methods
		- TTL - Minimum, Maximum, Default
		- Smooth Streaming Yes/No - (cannot select if IIS is the origin)
		- Restrict Viewer access - (Use signed URLs or signed cookies)
		- Compress objects automatically
		- Lambda Function Associations with CloudFront Events
			- Viewer Request/Response & Origin Request/Response
		- AWS WAF Web ACL (Web Application Firewall)
		- Alternate Domain Names (CNAMEs)
		- Default/Custom SSL Certificate when using HTTPS
			- Default one uses *.cloudfront.net

	- Create Invalidation - Invalidate the cache for one or more objects
		- Once the CDN is up and running, if there are any updates and you want that to be served immediately
			- you can create invalidations and specify the path patterns
			

VPN 

	- Target server gets the IP address of the VPN server
		- Source computer initiating the request is hidden from the target Server
		
	- Attacker makes use of the above
		- He connects to one of the VPN server and performs the attack on the target server

	- Blocked sites in a country can be accessed via VPN server (located in a different country)

	- In corporate environment, VPN is used to connect to instances in private subnet
		- you setup your VPN server in public subnet (use openvpn from marketplace to setup a ec2 instance as a vpn server)
		- Enable VPN server to route traffic to the destination instance

		- when connecting openvpn vpn server ec2 instance, use openvpnas as the user


try
nc -zv <public ip> <port>
nc -zv 54.184.70.121 22
Connection to 54.184.70.121 22 port [tcp/ssh] succeeded!

VPN Connections (covering Virtual Private Gateway, Customer Gateway and VPN connection)
- Flow
	- Create Customer Gateway by specifying 
		- a name
		- Dynamic / Static routing (select static for this example)
		- the IP address of the server/firewall of the target
	- Create Virtual Private Gateway and attach it to your VPC
		- Virtual Private Gateway is the router on the Amazon side of the VPN tunnel
		- here for this example, let's say the CIDR prefix for your VPC is: 10.0.0.0/16
			- note if you have overlapping CIDR blocks between VPC and target, you can't establish VPN connection (important)
		- Select Amazon default ASN option
	- Establish VPN connection between the two by specifying both and joining them
		- specify a name
		- select the VPN gateway from the drop down
		- select "Existing" option for the customer gateway
		- select the customer gateway from the dropdown
		- select "static" routing option
		- for the static ip prefix option
			- specify the internal CIDR address prefix for the target (for this example: 192.168.0.0/16)
		- it will not connect until you download the configuration for the type of customer gateway
			- specify the vendor, platform and software of the firewall
			- click on the "Download" button
		- this needs to be uploaded on the customer gateway side
	- To propagate the route, add an entry in the route table by specifying 
		- the target internal CIDR addresses for ex: 192.168.0.0/16
		- select the virtual private gateway


Site to Site (S2S) VPN
- allows two networking domains to communicate securely between each other over an untrusted network like Internet
- It establishes a VPN Tunnel between VPN Server and an another point say an EC2 Instance (here EC2 instance is considered as IPSEC VPN Tunnel termination endpoint)
	- if the EC2 instance goes down, the tunnel breaks
	- to provide high availability in S2S, an Active and Passive connection is established between two points
	- in the event of active connection going down, passive connection takes over
- In the absence of inter-region vpn peering earlier, S2S VPN was the only option if you want to establish a vpn tunnel between two regions
- It is now possible to establish vpc peering between two VPCS in different region (Say vpc1 in Mumbai and vpc2 in Singapore)
- however if you need to establish connnection between Azure site and AWS site, then S2S VPN is the option

- see the S2S architecture diagram in the folder
	- ec2 instances in subners in vpc1 -> router -> Virtual private Gateway -> VPN Connection -> Custom Gateway -> ...
	- see the importance VPN Private Gateway (VGW) Diagram in the folder
	- VGW has built-in high availability for VPN connections - (AWS automatically creates 2 HA endpoints, each in a different AZ - so 2 VPN tunnel is established)
	- Customer Gateway is the IPSEC VPN Tunnel termination point (this can be a firewall or server)


