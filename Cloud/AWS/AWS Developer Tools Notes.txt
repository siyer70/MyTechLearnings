Developer Tools
Code Star
	- Provides an unified interface to develop, build and deploy applications on AWS
	- It allows us to launch entire continuous delivery pipeline in minutes, allowing releasing code faster
	- Various services like CodeCommit, CodeBuild, CodeDeploy, 3rd Party (JIRA) can be integrated into one platform
	- It also acts as na Orchestration platform and provides lot of templates
		- with which you can deliver Continuous Delivery Pipeline in minutes
	- Provides centralised Dashboard to see the status of your deployment pipeline
		- with Continuous Deployment Code Pipeline docking view (covering Source -> Build -> Deploy)
			- Code Pipeline overall covers Source -> Build -> Test -> Deploy -> Monitor where
				- where we have AWS tools for each area - i.e.
					- Source = CodeCommit
					- Build = CodeBuild
					- Deploy = CodeDeploy and CloudFormation (for creating EC2 instances and S3 buckets)
					- Monitor = CloudWatch
		- with other docking views of Code commits, application activity (cpu usage, disk usage etc)
	- Integrated with JIRA
	- When you start with CodeStar
		- it will prompt to choose one of the listed project templates
			- for ex: 
				- Java Spring web service on AWS Lambda
				- Node.js web application on AWS Elastic Beanstalk
				- HTML static website on EC2
				- Express.js web service on AWS Lambda
				- Go web application on AWS Lambda
				- Python web service on AWS Lambda
				- PHP (Laravel) web application on AWS Elastic Beanstalk
		\		- Java Spring web application on EC2 (SELECTED FOR THIS DISCUSSION)
		- It will ask to specify the Project Name
			- Repository (Github or CodeCommit) and name of the repository
		- It will include all the tools and services required for a development project (CodeCommit, CodeBuild etc)
			- will take the permission to administer AWS resources on your behalf
		- Will allow to edit EC2 Configuration
			- Instance type, VPC and Subnet
		- will provide an option to select the IDE
			- Cloud9, Eclipse, Visual Studio, Command Line Tools (Git Source Repository tools)


CodeCommit
	- Source Repository tool
	- Before using CodeCommit,
		- you need to install git client
			- for installing git client on MAC
				- install homebrew
					- once installed, type “brew install git”
					- once git client is installed - check some git commands
					- configure git using	
						- git configure user.name
						- git configure user.email
		- create a IAM user 
			- Associate policies directly for using code commit
				- you can give full access to code commit with delete repository rights
				- you can give full access to code commit without delete repository rights
				- you can give read access
			- Create https credentials and ssh credentials and store it in safe place
		- once the rights are given
			- create a repository in codecommit
			- in your local box, git clone <url> 
				- you can either obtain SSH or HTTPS url immediately after the repository is created in code commit
			- you’ll be prompted for https/ssh credentials (depending on which url you used)
			- once credentials are verified, the code will be checked out in your local box
			- make changes in the source
				- create a “buildspec.yml” file in the root
				- follow language specific conventions
					- example for Java Maven - create src/main, src/test etc
					-
			- add them to local git (git add *, git commit -m “”)
			- push the source to code commit (git push origin master
CodeBuild
	- Code Build Tool
	- IAM User should have AWSCodeBuildAdminAccess
	- Setup instructions - Create a Build Project as follows
		- Project Name, Description & Tags
		- Specify the Source Provider, Repository
		- Environment Image (Managed Image by CodeBuild, Custom Image by Docker)
		- OS -> Ubuntu
		- Service Role (New or Existing) and specify the role name
		- Specify configuration parameters
			- Time out, 
			- Certificate from S3 bucket, 
			- VPC, 
			- Compute (3GB memory with 2vCPUs, 7GB memory with 4 vCPUs, 15GB memory with 8 vCPUs)
			- Environment variables
		- Specify buildspec (buildspec.yml)
		- Artifacts - add one or more output artifacts from the build
			- Artifact<n>
				- type (where to store i.e. S3)
				- bucket name, Name, Path, Namespace (build id)
				- packaging (None or Zip)
				- artifact encryption
				- cache type (no cache)
				- CloudWatch Logs checkbox (store build logs in CloudWatch - specify group and stream name)
				- S3 Logs (checking this option will upload build output logs to S3)
CodeDeploy
	- Automates application deployments to
		- EC2 instances
		- On Premise instances
		- Serverless Lambda Functions
		- ECS Services
	- Unlimited variety of applications are supported (executables, web application/services, scripts, multimedia etc)
	- It makes it easier for you to
		- rapidly release new features
		- update lambda functions
		- avoid downtime during application deployment
		- avoid the manual error-prone process
	- It scales with your infrastructure so you can deploy to one instance or thousands
	- It integrates well with other devtools in this category
		- source control (code commit, git repository, gitlab)
		- configuration management
		- CI/CD (CD - Continuous Delivery and Continuous Deployment)

	- Pre-Requisites for using Code Deploy
		- Step 1: Provision an IAM User (login as admin/root)
			- with a Role (name it as CodeDeployerRole) having the following policy
				- AWSCodeDeployRole
			- the user should be setup with a policy (described below) having access to various services
				- this should cover access to (EC2, S3, IAM, Autoscaling, Lambda, ECS, CodeDeploy)
				- if you are using cloudformation for setting up CodeDeploy - then include that also
		- Step 2: If you are going to use CodeDeploy via CLI then install AWS CLI
		- Step 3: Create a Service Role (login as admin/root)
				- From the IAM Service,
					- Create a Role (name it as CodeDeployServiceRole) as follows
						- Choose the AWS Service - CodeDeploy
						- Choose one of the following based on your use case
							- EC2/On Premises deployments, choose CodeDeploy
							- ECS deployments, choose CodeDeploy - ECS
							- Lambda deployments, choose CodeDeploy for Lambda
						- On the attached permissions policy page, the policy is displayed (see service role policy)
						- Once the role is created, you can see the same in Trust Relationships tab with Edit option

		- Step 4: Create an IAM Instance Profile
			- Two step process
				- Step 4.1 - create a Policy
					- From the IAM Policies option, create a policy with the JSON provided (see IAM profile policy)
					- Name the policy as CodeDeploy-EC2-Permissions
				- Step 4.2 - create a Role having that policy attached
					- From the IAM Roles option, create a role with the above as attached policy
					- Name the Role as CodeDeploy-EC2-Instance-Profile

	- Code Deploy Components are as follows:
		- Application (covers the name and compute platform i.e. EC2/Lambda/ECS) - It consists of
			- Step A: Deployment Group (Answers where - It covers the infrastructure part and service role) - 
			- Step B: Create/Copy Deployment (Answers what & how - covers Deployment configurations)

		- Step A: Deployment Group
			- It covers the following
				- Deployment Group Name
				- Service Role (see Pre-requisite Step 3)
				- Deployment Type (In Place / Blue-Green)
				- Environment Configurations
					- You can have one or more or all of the following)
						- EC2 Autoscaling Groups
						- EC2 Instances
						- On Premise Instances 
					- Instances are identified by tags
				- Deployment Settings (OneAtATime, HalfAtATime, AllAtOnce)
					- Each of which are constrained by how many instances can be down at a time update is done
					- In case of AllAtOnce 
						- the status of deployment is succeeded if it deploys in 1 or more instances
					- In case of HalfAtOnce
						- at least half of the instances should succeed to be marked as success
					- In case of OneAtATime
						- all the instances should succeed to be marked as success with an exception
						- exception is that if the last deployment fails - it is still marked as success
				- Enable Load Balancing (specify LB details - Application/Network/Classic LB)
		- Step B: Create/Copy Deployment
				- Once the Deployment Group is created (i.e. infra details is specified), start the deployment
				- It covers the following:
					- Select the Deployment Group
					- Specify where the Revision is stored (S3/Github)
					- Specify the revision location - for eg if s3 then: S3://<bucket name>/folder/object.[zip|tar|tgz]
					- Deployment Description (just a note)
					- Deployment Group Overrides (OneAtATime, HalfAtATime, AllAtOnce)
					- Deployment Behaviour settings (how CodeDeploy manage the status in exception conditions)
					- Rollback settings

	- Note that Revision stored in S3 should fulfil the following (for EC2/On Premise deployments)
		- if the artifact is a zip file, within the zip, 
			- in the root there should be a appspec.yml (Important)
			- it generally contains the scripts folder with .sh files in it
			- one or binary files in the root or in folders
	
	- During the deployment, CodeDeploy reads the appspec.yml and follows the instruction in it
		- In the install phase: 
			- It will copy the contents from Source to Destination folder 
				- (for eg:  from S3 bucket to EC2 instance’s folder)
			- If the revision content is in zip file format, it will automatically extract the content and store it destination
		- hooks specified in the appspec.yml will be executed - hooks can be:
			- BeforeInstall, AfterInstall, ApplicationStart, ApplicationStop
		- with each hook, a handler is associated (typically a shell script file in the scripts folder of the revision content)
		- for eg: 
			- BeforeInstall, you might want to specify what runtime to install
			- AfterInstall, you might want to configure the application
			- ApplicationStart/Stop, you might want to specify the instructions to start/stop the application



IAM Instance Profile Policy
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "",
            "Effect": "Allow",
            "Principal": {
                "Service": [
                    "codedeploy.amazonaws.com"
                ]
            },
            "Action": "sts:AssumeRole"
        }
    ]
}




CodeDeploy Service Role Policy
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "",
            "Effect": "Allow",
            "Principal": {
                "Service": [
                    "codedeploy.amazonaws.com"
                ]
            },
            "Action": "sts:AssumeRole"
        }
    ]
}
						

IAM User Policy for CodeDeploy
{
  "Version": "2012-10-17",
  "Statement" : [
    {
      "Effect" : "Allow",
      "Action" : [
        "autoscaling:*",
        "codedeploy:*",
        "ec2:*",
        "lambda:*",
        "ecs:*",
        "elasticloadbalancing:*",
        "iam:AddRoleToInstanceProfile",
        "iam:CreateInstanceProfile",
        "iam:CreateRole",
        "iam:DeleteInstanceProfile",
        "iam:DeleteRole",
        "iam:DeleteRolePolicy",
        "iam:GetInstanceProfile",
        "iam:GetRole",
        "iam:GetRolePolicy",
        "iam:ListInstanceProfilesForRole",
        "iam:ListRolePolicies",
        "iam:ListRoles",
        "iam:PassRole",
        "iam:PutRolePolicy",
        "iam:RemoveRoleFromInstanceProfile", 
		"cloudformation:*”,
        "s3:*"
      ],
      "Resource" : "*"
    }    
  ]
}


	Deployment Concepts
	- Blue Green Deployment
		- Current version is referred as Blue and New version is referred to as Green
		- Discussion is about how you would introduce new version in production without downtime
		- Techniques
			- Update DNS Routing via Route53
				- Need to consider - TTL and Route53 Propagation time
			- Swap the Auto-Scaling Groups behind your ELB (Generally preferred)
			- Swap Launch Configurations (Not Recommended)
			- Swap Beanstalk Environments (applies only to EB environments) - Swap URLs menu option
			- Clone Stack with AWS Ops Works and updating DNS
	- Canary Deployments
		- Portion of your traffic is routed to the new version to see if it is a good version to move
		- Use weighted DNS routing to accomplish this
		- In case of Lambda
			- Create versions of Lambda
			- Map alias with each version 
				-  Dev<ChangeType - say v1
				- Stage<Change Type> say v2
				-  ProdCurrent - say v3
				- ProdLatest - say vr4
			- While creating a alias you can split traffic between two versions (for ex - v3 and v4)

CodePipeline
	- Continuous Delivery Service to automate steps required to release the software
	- It allows us to launch entire continuous delivery toolchain in minutes, allowing code release faster
	- For each pipeline defined - it consists of 3 stages
		- Source
		- Build
		- Deploy
	- Idea is that the moment code is committed in the source repository, build will be triggered and code is deployed

	- Before you configure a pipeline, kindly ensure your AWS account is subscribed to Key Management Service
		- Here are the steps to do that
			- Login in as root / admin
			- go to IAM screen
			- select Encryption Keys menu option - you’ll be taken to the Key Management Service
			- Create a default master key as follows:
				- Specify an alias and description for the key
				- Specify the Key Administrators, Key Deletion access, Key Users, Other AWS accounts

	- Setup the pipeline
		- Pipeline name
		- New Service Role or use an existing service role for the code pipeline
		- Artifact store - choose default location
		- Specify Source Provider - CodeCommit and select the repo, branch, change detection mechanism
		- Specify Code Build Provider - CodeBuild and select the configured project
		- Specify Deploy Provider - CodeDeploy and select the Application, Deployment Group 
			

	- Note that Code Pipeline stores the complete source repo in S3 with the name SourceArtifact
		- Source stage output is the “SourceArtifact” in S3
		- Build stage input would refer this
	- Similarly the build artifact is also stored in S3 with the name BuildArtifact
		- So, Build stage output would be BuildArtifact
		- Deploy stage input would refer this

	- You can disable a stage
	- you can enable manual approval stage (typically for prod deploy)

Cloud9
X-Ray (Application Monitoring tools - often compared with New Relic / Azure Application Insight)
	AWS X-Ray allows us to debug our applications with functionality of request tracing so we can find the root cause and performance issues
	- Here is how it works
		- Application code bundled with X-Ray SDK
		- During runtime X-Ray SDK sends application metrics specific data to X-Ray Daemon
		- X-Ray Daemon in-turn sends the aggregated/processed data to X-Ray API 
		- via X-Ray API & X-Ray Console (which runs on the web browser), you can visualise 
			- the application connectivity
			- trace root cause of the performance issues

	- X Ray Console
		- you can select the time window from the web page
		- you will see the various application entities in the graph shown in the page
			- Example entities - each entity is shown as a circle
				- Application running within Elastic Beanstalk
				- DynamoDB table (each table will be represented separate entity)
				- SNS
		- if everything runs fine, you will see the circle filled with green completely for each entity
		- if there are errors, you will see sections in orange within the circle for the specific entity
		- if you click on the orange section (error portion) within the circle 
			- you can then drill down and trace down to each request or the problem areas
			- if provides you with various stats such as response code, time etc
			- average response time for each url (aggregated over a period)

		- Integrates well with following AWS services
			- EC2, Lambda, ELB, API Gateway, Elastic Beanstalk
		- Provides support for following platforms
			- Java, Go, .NET, Ruby, Python, NodeJS
