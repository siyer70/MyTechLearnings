Security, Identity & Compliance
========================
IAM
	- Basics
		- Comprises of
			- Users
				- Users can be given 
					- Programmatic Access (API, CLI, SDK and other dev tools)
					- Console Access
				- User can be associated with 0 or more groups
				- You can copy permissions from a model user
				- you can attach existing policies directly (and override conflicting policies)
			- Groups 
				- Groups can be associated with 0 or more
					- AWS Managed Policies
					- Job Function 
						- SystemAdministrator, NetworkAdministrator, DatabaseAdministrator, ViewOnlyAccess
					- Custom Managed Roles
				- Groups can have 0 or more users

			- Roles 
				- Roles are associated with policies
			- Policies
	- IAM is universal - it does not apply to regions at this time
	- root account is simply the account created when you first setup AWS account - it has complete admin access
		- you should always setup MFA for this account
		- you can also customise password rotation policies
	- new users have no permissions when first created
	- New users are assigned Access Key id & Secret access keys  when first created
		- you can use this to access AWS via the APIs and command line
		- you only get to see this once, if you lose them you have to regenerate them
Security Groups
	- you can specify only allow rules - you can’t specify deny rules
	- Stateful - whatever inbound rules are created - it is automatically applied to outbound as well
	- you can’t block / blacklist a particular port
	- you can’t block individual IP address
	- changes to security groups take effect immediately
	- all inbound traffic is blocked by default - you need to add rules to enable them
	- you can assign multiple security groups to your EC2 instance
		- select EC2 instance
		- click on Actions -> Networking -> Change Security Groups and select multiple security groups
		- the result is the union of two sets of multiple groups
	- EC2 to Security Groups relationship is Many to Many
			
Cross Account Access
	- Within a multi-account (or multi-role) AWS environment, you can switch roles within Management Console
	- You can sign in to the console using your IAM username then switch the console to manage another account
		- without having to enter another user name and password

	- Steps
		- You need two AWS Accounts to test this
		- Say you have one account for production AWS account and one for developer AWS account
		- and you want to give S3 specific bucket access to your developers
		- First login in to developer AWS Account (as root)
			- create a group called “developer”
			- create a user (say shekhar)
		- Log in to production AWS account (as root)
			- In the IAM, 
				- create a policy called “read-write-app-bucket-policy” (see Bucket Policy section)
				- create a role called “MyDeveloperAccess”
					- select “Another AWS Account”
					- specify the developer AWS account id and leave rest as default
					- attach the newly created policy “read-write-app-bucket-policy” to it
		- Log back to developer AWS account (as root)
			- In the developer group that you created earlier
				- add an inline policy called “allow-assume-s3-role-in-production”
					- paste the inline policy (see Inline Policy section)
					- replace the production account id with the actual id of the other PROD AWS account id
		-  Log in to developer AWS account (as shekhar)
			- select the “Switch Role” menu option from your name drop down
				- specify the PROD AWS Account Id
				- specify the Role “MyDeveloperAccess”
				- specify the display name
		- You can now assume Developer access in Production Account
			- you can perform the operations in S3 bucket and see it works now


Bucket Policy - “read-write-app-bucket-policy”
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "s3:ListAllMyBuckets",
      "Resource": "arn:aws:s3:::*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:ListBucket",
        "s3:GetBucketLocation"
       ],
      "Resource": "arn:aws:s3:::<your bucket name>“
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:PutObject",
        "s3:DeleteObject"
      ],
      "Resource": "arn:aws:s3:::<your bucket name>/*"
    }
  ]
}

Inline policy - “allow-assume-s3-role-in-production”

{
  "Version": "2012-10-17",
  "Statement": {
    "Effect": "Allow",
    "Action": "sts:AssumeRole",
    "Resource": "arn:aws:iam::<PRODUCTION-ACCOUNT-ID>:role/MyDevelopersAccess"
  }
}

Key Management Service
Cognito - Web Identity Federation Service
	- Web identity federation is when you tried to sign in to a web site using an identity provider credentials (for eg google)
	- in other words Federation allows users to authenticate with a web identity provider
		- Federation means
			- combining or joining a list of users in one domain (such as IAM) with 
				- a list of users in another domain (such as Active Directory or Facebook)
			- Federation allows external identities (Federated Users) to have secure access in your AWS account
				- without having to create any IAM users

				- External Identities can come from corporate identity provider (AD, IPA) or web identity provider (facebook, amazon etc)
	- Identity broker
		- A service that allows you to take an identity from point A and join it (federate it) to point B
	- Web Identify Federation lets you give your users access to AWS resources once
		- they have successfully authenticated with a web-based identity provider (Amazon, Google, Facebook)
		- following successful authentication, the user receives an authenticate code that
			- they can then trade for temporary AWS security credentials
				- which maps to an IAM role allowing access to the required resources

	- Cognito is a web identity federation service - it has the following features
		- Sign up and sign in to your apps
		- Access for guest users
		- acts as an identity broker between your app and web identify provider, so no need to
			- write additional code
	⁃		- embed or store to AWS credentials locally on the device
			
		- synchronises user data for multiple devices
			- Cognito tracks the association between user identity and the various different devices they sign-in from
			- In order to seamless user experience for your application, 
				- Cognito uses push synchronisation to push updates and 
					- synchronises user data across multiple devices
					- Cognito uses SNS notification to all the devices associated with a given user identity
						- whenever data stored in the cloud changes
		- Recommended for all mobile applications AWS services

	- Cognito User Pools
		- User Pools are user directories used to manage sign-up and sign-in functionality for mobile and web apps
		- User can directly sign-in to the user pool 
			- username and password in Cognito
		or 
		- User can sign-in using Facebook/Amazon/Google
		- Cognito acts as an identity broker between identify provider and AWS
		- Successful authentication generates JSON Web Token (JWTs)
		- covers User registration, authentication and account recovery etc

	- Cognito Identity Pools
		- Identity pools enable provide temporary AWS credentials to access AWS services like S3 or DynamoDB
		- It is the one which actually authorises your access to your AWS resources

	- Example scenario - user needs to access a website that allows Facebook credentials and uses cognate service
		- Flow would work like this
			- User accesses the website url - since user has not yet authenticated herself
			- she is routed to login screen with Facebook as one of the option
			- User chooses Facebook option and she is redirected to Facebook login page
			- user enters the username and password and Facebook authenticates the user
			- after successful authentication, Facebook generates and responds with an authentication code
			- the authentication code is then received by cognito user pool and it generates a JWT for the user
			- this JWT is then redirected to Cognito Identity pool on behalf of user 
			- Cognito identity pool then returns back AWS credentials in the form of an IAM role
			- user is then able to access the AWS resources that the IAM role supports

Security Token Service
	- Allows to create temporary credentials

	use case
	- When developer working on his local environment and needs access to S3 in aws, 
		- he can be allowed to use sts to generate temporary credentials for accessing s3

	(follow the below to implement this use case)

	- Step 1: create a cross account role in IAM
		- while creating role, select the option "Another AWS Account" and specify the account id
		- in the permissions page, specify s3 and select s3readonly policy
		- specify a name for the role and create a role say ("STSRole")
	- Step 2: Attach a S3ReadOnly policy to that IAM Role
	- Step 3: Allow user to Assume Role with STS
		- For a selected user, click "Add inline policy" link in the user page
		- Choose a service - select STS
		- Actions - AssumeRole
		- Resources - add arn of the previous created role in step 1
	- Step 4: Remove all other policy from user except Assume Role
		- this step is only to ensure that no other action privilege is conflicting with our intended actions

	In the AWS Credentials file (available in file ~/.aws/credentials), add a section

	[myprofile]
	arn = <arn of the sts role>
	source-profile = default

	(default profile is the one that would be inferred when you run aws cli) 

	then you can run aws s3 commands with the profile 
	aws s3 ls --profile myprofile


	this command will then generate a temporary credential (access key, secret key, token) for the current user specified in default section

	internally it will execute the following command to generate temporary credential
	aws sts assume-role --role-arn <arn of the sts role created in step 1> --role-session-name "somesessionname"



	- Other Example scenarios
		- User needs to access a reporting application that enables access to user’s S3 bucket
		- User needs to be authenticated using organisation’s active directory
	- Flow works like this
		- Step 1: User logs into reporting application with username and password
		- Step 2: Identity Broker (for ex: Cognito) receives the username and password 
				and validates with Active Directory using LDAP protocol
		- Step 3: User is authenticated by Active Directory 
		- Step 4: Identity Broker contacts Security Token Service
			- Identity broker calls the new GetFederationToken function using IAM credentials.
			- The call must include an IAM policy and a duration (1 to 36 hours) 
			- Policy must specify the permissions to be granted to the temporary security credentials
		- Step 5: STS responds as per below
			- STS confirms that the policy of the IAM user making the call to GetFederationToken
			- Gives permission to create new tokens 
			- It returns four values to the application
				- Access Key ID
				- Access Secret Key
				- Token
				- Duration (Token’s lifetime)
		- Step 6: Cognito forwards the response to Application
		- Step 7: Application hits S3 with those STS response and requested action
		- Step 8: S3 contacts IAM to verify the token and whether the requested operation is permitted
		- Step 9: IAM confirms whether the token is valid and the requested operation is permitted and S3 responds
		
Macie
	- Powerful security and compliance enabling service 
		- under the Security, Identity and Compliance category in AWS  Management Console
	- Main function of Macie is to automatically detect, identify, classify and protect security data
	- Uses Machine Learning / AI for the above
	- Detection and Classification
		- Automatically and continuously monitors the new data stored in S3 
		- it learns from / analyses
			- the data access patterns
			- user behaviour
			- cloud trail event data
		- and it alerts from unusual and irregular activity 
			- It can automatically assign business values to data in the form of a risk score
				- allowing priorities of alerts to be established
		- It uses NLP methods to classify and interpret different data types and content
	- Protection of Data
		- Monitor and Discover security changes governing your data
		- identify security centric changes - such as access keys held in s3 bucket
			- identify critical, sensitive and security focused data - API keys, secret access keys, PII / PHI data
			- detect changes and alterations to security policies and access control lists
			- Maintain compliance requirements for various regulations

AWS Secret Manager
	- Enables customers to rotate, manage, retrieve db credentials, API keys and other credentials throughout their lifecycle
	- use versioning so applications do not break when secrets are rotated
	- Fine grained access control on who can access the secrets with the help of IAM and resource based policies

	Options
	- Credentials for RDS Database (Lambda function is created automatically for secret rotation and the logs are sent to cloudwatch logs)
	- Credentials for other database (Specify server address, database name, port number - Lambda function needs to be created manually for secret rotation)
	- Other type of secrets (for eg: API Key)

Certificate Manager
Directory Service

Web Application Firewall (WAF)
- AWS WAF is a web application firewall service that helps protect your web apps from common exploits that could affect app availability, compromise security, or consume excessive resources.
- AWS WAF is a web application firewall that lets you monitor the HTTP and HTTPS requests that are forwarded to an Amazon API Gateway API, Amazon CloudFront or an Application Load Balancer.
- AWS WAF also lets you control access to your content. Based on conditions that you specify, such as the IP addresses that requests originate from or the values of query strings, API Gateway, CloudFront or an Application Load Balancer responds to requests either with the requested content or with an HTTP 403 status code (Forbidden).

At the simplest level, AWS WAF lets you choose one of the following behaviors:
- Allow all requests except the ones that you specify
- Block all requests except the ones that you specify
- Count the requests that match the properties that you specify

Steps:
- Create one or more condition(s)
- Using the conditions create one or more rules (with new WAF, you can also create Rule Groups)
- Create Web ACL and apply the rules created earlier - if the rules match then you can choose one of the earlier stated behaviours
- Specify CloudFront / ALB / API Gateway in the web acl and the underlying aws resource of CloudFront / ALB / API Gateway
(You would need to precreate the resources (for eg: ALB) before creating web acl so that you can specify the reference of that resource in web acl)


AWS Shield
- Protects your workloads from Distributed Denial Of Service (DDoS) attacks
- Two types
	- Shield Standard (protection against the most common network and transport layer DDoS attacks)
	- Shield Advanced (near real time visibility into the attacks that might be occurring - gives customers 24 x 7 access to AWS DDoS response team (DRT)
		- During the attack, if the infrastructure has scaled, AWS will return the credits (only applicable for Route53, ELB, CloudFront)
		- Automated application (Layer 7) traffic monitoring
		- Expensive ($3000 per Organisation and additional cost)



Inspector
- CVE (Common Vulnerabilities & Exposure)
- CIS (Center for Internet Security) Benchmarks on OS Security 
- Security Best Practies
- Runtime behaviour and analysis


- Agent is installed on servers
- Scans and produces results
	- for CVEs, scans for vulnerabilities in all the packages
	- for OS, checks the server is following the hardening rules as per CIS benchmarks (not so mature product)
- Security Best Practices (supports the following 9 rules)
	- Disable root login via SSH
	- Support SSH V2 only
	- Disable Password Authentication via SSH
	- Configure maximum password age and minimum high
	- Configuring password complexity
	- Enable ASLR and DEP
	- Configure permissions for system directories	
- Runtime behaviour and Analysis
	- Insecure client protocols
	- Unused listening TCP ports
	- Insecure server protocols
	- Software without DEP
	- Software without Stack Cookies
	- Root process with insecure permission
Other tools that can be compared with Inspector
- Nessus
- Nexpose
- AWS Inspector
- OpenScap

Trusted Advisor
- Analyses your AWS environment provides best practice recommendations in 5 major categories:
	- Cost Optimisation
		- Idle / Under utilisation of
			- RDS DB Instance
			- EC2
			- Load Balancers
		- Unassociated Elastic IP Addresses
	- Performance
		- CloudFront Content Delivery Optimisation (s3 not using CloudFront)
	- Security
		- Security Groups - Unrestricted access
		- ELB Listener Security - not using recommended configurations for encrypted comm
		- S3 Bucket Permission
	- Fault Tolerance
		- RDS instance instance in Single AZ
		- EC2 Instances balancing across AZs
		- Age of snapshot of EBS
	- Service Limits
		- ASG Limit Checks when it reaches x% (say 80%) threshold
		- Similarly DynamicDB provisioned throughput reach limit
		- CloudFront stack limit

- Types of Checks
	- Core Checks
		- Security Group - Specific Port Unrestricted
		- IAM Use
		- MFA on Root Account
		- Performance: Service Limits

	- Access to All Trusted Advisor Checks ranging from
		- Security, Performance, Fault Tolerance & Cost Optimisation, Service Limits
	- Get weekly updates via email as well

 
Generating S3 Pre-signed url
aws s3 presign <uri>
aws s3 presign <bucketname>/<objectname>


SAML (Security Assertion Markup Langugage)
- It is an secure XML based communication mechanism for communicating identities across organisations
- It eliminates the need to maintain multiple authentication credentials such as passwords in multiple locations

