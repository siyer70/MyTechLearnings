- sits between IaaS and PaaS i.e. HyBrid and benefits from Both
- why containers

	- IaaS - some insight

	Virtual Machine Architecture

		vm1	vm2	vm3
	
		App	App	App

		OS	OS	OS (All OS here refers to Guest OS)

		-------------------
		    Hypervisor
		-------------------
		     Host OS
		-------------------
		    Hardware
		-------------------

Pros
Infrastructure as a Service allows you to share compute resources with other developers by virtualizing the hardware using virtual machines. Each developer can deploy their own operating system, access the hardware, and build their applications in a self-contained environment with access to RAM, file systems, networking interfaces, and so on.

Cons

- The smallest unit of compute is an app with its VM
- The guest OS maybe large, even gigabytes in size, and takes minutes to boot
- As demand for your application increases, you have to copy an entire VM, and boot the guest OS for each instance of your app, which can be slow and costly



App Engine

	Architecture

		App Layer

		Billing		Inventory	Orders


		---------------------------------------


		Services Layer 
		(Programming Services provided by Cloud Vendor)

		Data | Cache | Storage | DB | Network




Pros
- With App Engine, you get access to programming services. So all you do, is write your code in self-contained workloads that use these services, and include any dependent libraries. 

- As demand for your app increases, the platform scales your app seamlessly and independently by workload and infrastructure. This scales rapidly, but you won't be able to fine tune the underlying architecture to save cost.


Cons
This scales rapidly, but you won't be able to fine tune the underlying architecture to save cost. 



Containers

	App		App		App

	Libs		Libs		Libs

	------------------------------------
		OS / Hardware
	------------------------------------


Pros
- The idea of a container is to give you the independent scalability of workloads, and an abstraction layer of the OS and hardware. What you get is an invisible box around your code and its dependencies, with limited access to your own partition of the file system and hardware. 

- It only requires a few system calls to create and starts as quickly as a process. All you need on each host is an OS kernel that supports containers, and a container runtime. In essence, you're virtualizing the OS; it scales like PaaS, but gives you nearly the same flexibility as IaaS. 

- With this abstraction, your code is ultra-portable, and you can treat the OS and hardware as a black box. So, you can go from development, to staging, to production, or from your laptop to the cloud without changing or rebuilding anything. If you want to scale for example, a web server, you can do so in seconds and deploy dozens or hundreds of them, depending on the size of your workload, on a single host. 

- You'll likely want to build your application using lots of containers, each performing their own function like microservices. If you build them like this, and connect them with network connections, you can make them modular, deploy easily, and scale independently across a group of hosts. The host can scale up or down and start and stop the containers on-demand as demand for your application changes, or as hosts fail. 

- A tool that helps you do this well is Kubernetes. Kubernetes makes it easy to orchestrate many containers on many hosts, scale them as microservices, and deploy rollouts and rollbacks. 