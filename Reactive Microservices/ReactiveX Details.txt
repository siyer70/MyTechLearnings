Reactive Systems
================
	- An architectural style that allows multiple applications to work together

	- Reactive Manifesto
		- Responsive
		- Resilient
		- Elastic
		- Message Driven

	- It is about Architectural + Design Approach


Reactive Programming
====================
	- Declarative and Event Based Programming

	- Decompose problems into multiple, asynchronous and discrete steps

	- Example: Callbacks, Actors, Completable Futures, Reactive Streams

Reactive Extension or ReactiveX
ReactiveX is a library for composing asynchronous and event-based programs by using observable sequences.

It extends the observer pattern to support sequences of data and/or events and adds operators that allow you to compose sequences together declaratively while abstracting away concerns about things like low-level threading, synchronization, thread-safety, concurrent data structures, and non-blocking I/O.

Observables fill the gap by being the ideal way to access asynchronous sequences of multiple items
		single items		multiple items
synchronous	T getData()		Iterable<T> getData()
asynchronous	Future<T> getData()	Observable<T> getData()


Why Use Observables?
The ReactiveX Observable model allows you to treat streams of asynchronous events with the same sort of simple, composable operations that you use for collections of data items like arrays. It frees you from tangled webs of callbacks, and thereby makes your code more readable and less prone to bugs.

Observables Are Composable
Techniques like Java Futures are straightforward to use for a single level of asynchronous execution but they start to add non-trivial complexity when they’re nested.


Observables Are Flexible
ReactiveX Observables support not just the emission of single scalar values (as Futures do), but also of sequences of values or even infinite streams. Observable is a single abstraction that can be used for any of these use cases. An Observable has all of the flexibility and elegance associated with its mirror-image cousin the Iterable.

An Observable is the asynchronous/push “dual” to the synchronous/pull Iterable

event		Iterable (pull)		Observable (push)
retrieve data	T next()		onNext(T)
discover error	throws Exception	onError(Exception)
complete	!hasNext()		onCompleted()


Observables Are Less Opinionated
ReactiveX is not biased toward some particular source of concurrency or asynchronicity. Observables can be implemented using thread-pools, event loops, non-blocking I/O, actors (such as from Akka), or whatever implementation suits your needs, your style, or your expertise. Client code treats all of its interactions with Observables as asynchronous, whether your underlying implementation is blocking or non-blocking and however you choose to implement it.

And importantly: with ReactiveX you can later change your mind, and radically change the underlying nature of your Observable implementation, without breaking the consumers of your Observable.


Reactive Programming
ReactiveX provides a collection of operators with which you can filter, select, transform, combine, and compose Observables. This allows for efficient execution and composition.


Some interesting links before using RxJava to know the actual advantage of RxJava

https://allegro.tech/2014/10/async-rest.html


Observables
Combines the non-blocking features (something like completableFutures) with sequence of value operations (something like stream provides)

- Generalisation of the Observer pattern
- Adds
	- Streams like API
	- API with Common operations implemented
	- Backpressure / throttling


Streams vs Observables

- Streams for defining operations on collections or data parallelism
	- I/O not impossible, but bit of a smell in an intermediate operations
	- Cleaner Collections operations

When to use Streams
when the data is available at rest and need to process like batch.
Use cases
- Collections Processing
- Batch processing
- Queries on already available data
	- eg: Find the transactions with highest value	

- Observables for composing operations
	- Abstract over blocking or non-blocking sources
	- Frequently wraps the results of I/O or an API call
	- More flexible threading model

Use cases
Ready handy, When the data may be in motion and use some of the benefits of specifying declarative style of operations 

- On demand Computation
- Updating calculations based on a series of events
- I/O Workloads
- eg: 
	- Monitor stock market prices until the price is below x amount
	- Aggregating temperature sensor information to control heating

Completable Futures vs Observables
- Completable futures wait for all elements in the list to be available
- Observables start processing one by one on arrival

A Complete Guide To Learn RxJava
https://blog.mindorks.com/a-complete-guide-to-learn-rxjava-b55c0cea3631


RxJava — Flowables — What, when and how to use it?
https://android.jlelse.eu/rxjava-flowables-what-when-and-how-to-use-it-9f674eb3ecb5


RxJava Operator - Map Vs FlatMap
https://medium.com/mindorks/rxjava-operator-map-vs-flatmap-427c09678784


RxJava Operator - Concat Vs Merge
https://blog.mindorks.com/rxjava-operator-concat-vs-merge


RxJava: FlatMap, SwitchMap and ConcatMap differences & examples
https://medium.com/appunite-edu-collection/rxjava-flatmap-switchmap-and-concatmap-differences-examples-6d1f3ff88ee0

Implement Caching In Android Using RxJava Operators
https://blog.mindorks.com/implement-caching-in-android-using-rxjava-operators


Understanding RxJava Zip Operator With Example
https://blog.mindorks.com/understanding-rxjava-zip-operator-with-example

Understanding RxJava Timer, Delay, and Interval Operators
https://blog.mindorks.com/understanding-rxjava-timer-delay-and-interval-operators

Understanding RxJava Create and fromCallable Operator
https://blog.mindorks.com/understanding-rxjava-create-and-fromcallable-operator

Understanding RxJava Subject — Publish, Replay, Behavior and Async Subject
https://blog.mindorks.com/understanding-rxjava-subject-publish-replay-behavior-and-async-subject-224d663d452f

Implement Search Using RxJava Operators
https://blog.mindorks.com/implement-search-using-rxjava-operators-c8882b64fe1d

RxJava + Fast Android Networking
https://blog.mindorks.com/rxjava-fast-android-networking-6e3d90ee4387

Error Handling in RxJava
https://blog.mindorks.com/error-handling-in-rxjava


Schedulers
https://android.jlelse.eu/rxjava-schedulers-what-when-and-how-to-use-it-6cfc27293add

Different schedulers
IO
Commonly used - uses an unbounded thread pool 
If thread is available, it uses it or else creates a new one
Usage: observable.subscribeOn(Schedulers.io())

Computation
Uses a fixed thread pool based on the number of cores available in system
Usage: observable.subscribeOn(Schedulers.computation())

NewThread
Spawns a newThread for each task
Can be used to offload time consuming task from Main thread
Should be used sparingly, since thread creation is a costly operation
Usage: observable.subscribeOn(Schedulers.newThread())


Single
Backed by a Single Thread 
Runs in a single thread - no matter how many observables you have
Usage: observable.subscribeOn(Schedulers.single())

Immediate
It runs the task immediately
Currently running task are put on hold to execute the immediate task
Usage: observable.subscribeOn(Schedulers.immediate())

Trampoline
Runs the task in the main thread itself by adding it to the main thread queue
It lets the current task to complete
Usage: observable.subscribeOn(Schedulers.trampoline())

Observable.just(1,2,3,4)
    .subscribeOn(Schedulers.trampoline())
    .subscribe(onNext);
 Observable.just( 5,6, 7,8, 9)
    .subscribeOn(Schedulers.trampoline())
    .subscribe(onNext);
 Output:
    Number = 1
    Number = 2
    Number = 3
    Number = 4
    Number = 5
    Number = 6
    Number = 7
    Number = 8
    Number = 9

Executors
Uses Fixed sized Custom thread pools, to execute the task
Usage:
val executor = Executors.newFixedThreadPool(10) val pooledScheduler = Schedulers.from(executor)

Android Scheduler
Uses rxAndroid library to execute the task in Main thread
Usage:AndroidSchedulers.mainThread()


Covers basics of Observables
Different types of observables (Observables, Flowable, Single, MayBe, Completable)
Covers Disposables and CompositeDisposables
Conversion between types (i.e. Flowable to Observable, Observable to Single etc)

https://www.vogella.com/tutorials/RxJava/article.html#creating-observables-subscribing-to-them-and-disposing-them


Disposables example
===================
Observable<Todo> todoObservable = Observable.create(emitter -> { ... });

// Simply subscribe with a io.reactivex.functions.Consumer<T>, which will be informed onNext()
// Also handle the error case with a second io.reactivex.functions.Consumer<T>
Disposable disposable = todoObservable.subscribe(t -> System.out.print(t), e -> e.printStackTrace());

// Dispose the subscription when not interested in the emitted data any more
disposable.dispose();


CompositeDisposable Example
===========================
import io.reactivex.Single;
import io.reactivex.disposables.Disposable;
import io.reactivex.observers.DisposableSingleObserver;
import io.reactivex.disposables.CompositeDisposable;

CompositeDisposable compositeDisposable = new CompositeDisposable();

Single<List<Todo>> todosSingle = getTodos();

Single<Happiness> happiness = getHappiness();

compositeDisposable.add(todosSingle.subscribeWith(new DisposableSingleObserver<List<Todo>>() {

    @Override
    public void onSuccess(List<Todo> todos) {
        // work with the resulting todos
    }

    @Override
    public void onError(Throwable e) {
        // handle the error case
    }
}));

compositeDisposable.add(happiness.subscribeWith(new DisposableSingleObserver<Happiness>() {

    @Override
    public void onSuccess(Happiness happiness) {
        // celebrate the happiness :-D
    }

    @Override
    public void onError(Throwable e) {
        System.err.println("Don't worry, be happy! :-P");
    }
}));

// continue working and dispose all subscriptions when the values from the Single objects are not interesting any more
compositeDisposable.dispose();

